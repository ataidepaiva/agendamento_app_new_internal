rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Função para verificar se o usuário logado é admin
    function isAdmin() {
      return request.auth != null
        && exists(/databases/$(database)/documents/usuarios/$(request.auth.uid))
        && get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.tipo == "admin";
    }

    // Regras para a coleção "usuarios"
    match /usuarios/{userId} {
      // Qualquer usuário (autenticado ou não) pode ler
      allow read: if true;

      // Apenas o próprio usuário ou admin pode editar
      allow write: if request.auth != null && (
        isAdmin() || request.auth.uid == userId
      );
    }

    // Apenas admin pode ler/escrever veículos
    match /veiculos/{docId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Apenas admin pode gerenciar motoristas
    match /motoristas/{docId} {
      allow read, write: if request.auth != null && isAdmin();
    }

    // Todos usuários autenticados podem ler rotas,
    // somente admin pode criar, atualizar ou deletar
    match /rotas/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }

    // Agendamentos
    match /agendamentos/{docId} {
      // Leitura: admin pode tudo, usuário só pode ler seus próprios agendamentos
      allow read: if request.auth != null &&
        (isAdmin() || resource.data.solicitanteId == request.auth.uid);

      // Criação: admin pode tudo, usuário só pode criar se for o próprio solicitante
      allow create: if request.auth != null &&
        (isAdmin() || request.resource.data.solicitanteId == request.auth.uid);

      // Atualização e exclusão: somente admin pode
      allow update, delete: if request.auth != null && isAdmin();
    }

    // NOVO: Permitir leitura da coleção municipios
    match /municipios/{docId} {
      allow read: if request.auth != null;
    }
  }
}
